using FluentAssertions;
using Moq;
using ShipParticularsApi.Entities;
using ShipParticularsApi.Entities.Enums;
using ShipParticularsApi.Repositories;
using ShipParticularsApi.Services;
using Xunit;
using static ShipParticularsApi.Tests.Builders.Entities.ShipInfoTestBuilder;
using static ShipParticularsApi.Tests.Builders.Entities.ShipSatelliteTestBuilder;
using static ShipParticularsApi.Tests.Builders.Entities.ShipServiceTestBuilder;
using static ShipParticularsApi.Tests.Builders.Entities.SkTelinkCompanyShipTestBuilder;
using static ShipParticularsApi.Tests.Builders.Params.ShipParticularParamTestBuilder;
using static ShipParticularsApi.Tests.Builders.Params.ShipSatelliteParamTestBuilder;
using static ShipParticularsApi.Tests.Builders.Params.SkTelinkCompanyShipParamTestBuilder;

namespace ShipParticularsApi.Tests.Services
{
    public class ShipParticularsServiceUnitTests
    {
        private readonly ShipParticularsService _sut;
        private readonly Mock<IShipInfoRepository> _mockShipInfoRepository;
        private readonly Mock<IUserService> _mockUserService;
        private const string FixedUserId = "TEST_USER_01";

        public ShipParticularsServiceUnitTests()
        {
            _mockShipInfoRepository = new Mock<IShipInfoRepository>();
            _mockUserService = new Mock<IUserService>();

            _mockUserService.Setup(s => s.GetCurrentUserId())
                .Returns(FixedUserId);

            _sut = new ShipParticularsService(
                _mockShipInfoRepository.Object,
                _mockUserService.Object
            );
        }

        [Fact(DisplayName = "신규 ShipInfo 생성 시, AIS와 GPS가 Off면 서비스가 추가되지 않는다.")]
        public async Task Case1()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";
            var param = ShipParticularsParam()
                .WithShipKey(shipKey)
                .WithIsAisToggleOn(false)
                .WithIsGPSToggleOn(false)
                .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync((ShipInfo?)null);

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                .Callback<ShipInfo>(arg => capturedEntity = arg)
                .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            _mockShipInfoRepository.Verify(e => e.UpsertAsync(It.IsAny<ShipInfo>()), Times.Once);

            capturedEntity.Should().NotBeNull();
            capturedEntity.Id.Should().Be(0L);
            capturedEntity.IsUseAis.Should().BeFalse();
            capturedEntity.ShipServices.Should().BeEmpty();
        }

        [Fact(DisplayName = "신규 ShipInfo이고, AIS 토글이 On인 경우 ShipServices의 길이는 1이다")]
        public async Task Case2()
        {
            // Arrange
            var param = ShipParticularsParam().WithIsAisToggleOn(true).Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync((ShipInfo?)null);

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                .Callback<ShipInfo>(arg => capturedEntity = arg)
                .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            _mockShipInfoRepository.Verify(e => e.UpsertAsync(It.IsAny<ShipInfo>()), Times.Once);

            capturedEntity.Should().NotBeNull();
            capturedEntity.Id.Should().Be(0L);
            capturedEntity.IsUseAis.Should().BeTrue();
            capturedEntity.ShipServices.Should().HaveCount(1);
            capturedEntity.ShipServices.Should().ContainEquivalentOf(SatAisService(param.ShipKey).Build());
        }

        [Fact(DisplayName = "신규 ShipInfo이고, GPS Toggle On한 경우 ShipService, ShipSatellite가 추가된다")]
        public async Task Case4()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";
            const string satelliteId = "SATELLITE_ID";

            var param = ShipParticularsParam()
                .WithShipKey(shipKey)
                .WithIsGPSToggleOn(true)
                .WithShipSatelliteParam(KtSatelliteParam().WithSatelliteId(satelliteId))
                .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync((ShipInfo?)null);

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                .Callback<ShipInfo>(arg => capturedEntity = arg)
                .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            _mockShipInfoRepository.Verify(e => e.UpsertAsync(It.IsAny<ShipInfo>()), Times.Once);

            capturedEntity.Should().NotBeNull();
            capturedEntity.Id.Should().Be(0L);
            capturedEntity.ExternalShipId.Should().BeSameAs(satelliteId);
            capturedEntity.IsUseKtsat.Should().BeTrue();

            capturedEntity.ShipServices.Should().HaveCount(1)
                .And.ContainEquivalentOf(KtSatService(shipKey).Build());

            capturedEntity.ShipSatellite.Should().NotBeNull()
                .And.BeEquivalentTo(
                    KtSatellite(shipKey).WithSatelliteId(satelliteId).WithCreateUserId(FixedUserId).Build(),
                    options => options.Excluding(s => s.CreateDateTime).Excluding(s => s.UpdateDateTime));

            capturedEntity.SkTelinkCompanyShip.Should().BeNull();
        }

        [Fact(DisplayName = "신규 ShipInfo이고, SK Telink를 사용하는 경우 ShipService, ShipSatellite, SkTelinkCompanyShip이 추가된다")]
        public async Task Case5()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";
            const string satelliteId = "SATELLITE_ID";

            var param = ShipParticularsParam()
                .WithShipKey(shipKey)
                .WithIsGPSToggleOn(true)
                .WithShipSatelliteParam(SkTelinkSatelliteParam().WithSatelliteId(satelliteId))
                .WithSkTelinkCompanyShipParam(SkTelinkCompanyShipParam())
                .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync((ShipInfo?)null);

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                 .Callback<ShipInfo>(arg => capturedEntity = arg)
                 .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            _mockShipInfoRepository.Verify(e => e.UpsertAsync(It.IsAny<ShipInfo>()), Times.Once);

            capturedEntity.Should().NotBeNull();
            capturedEntity.Id.Should().Be(0L);
            capturedEntity.ExternalShipId.Should().BeSameAs(satelliteId);
            capturedEntity.IsUseKtsat.Should().BeTrue();

            capturedEntity.ShipServices.Should().HaveCount(1)
                .And.ContainEquivalentOf(KtSatService(shipKey).Build());

            capturedEntity.ShipSatellite.Should().NotBeNull().And.BeEquivalentTo(
                SkTelinkSatellite(shipKey)
                    .WithSatelliteId(satelliteId)
                    .WithCreateUserId(FixedUserId)
                    .Build(),
                options => options
                    .Excluding(s => s.CreateDateTime)
                    .Excluding(s => s.UpdateDateTime));

            capturedEntity.SkTelinkCompanyShip.Should().NotBeNull()
                .And.BeEquivalentTo(SkTelinkCompanyShip(shipKey, 0L).Build());
        }

        [Fact(DisplayName = "기존 ShipInfo 컬럼 정보를 업데이트한다.")]
        public async Task Case6()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";

            var param = ShipParticularsParam()
                .WithShipKey(shipKey)
                .WithCallsign("UPDATE_CALLSIGN")
                .WithShipName("UPDATE_SHIP_NAME")
                .WithShipType("PASSENGER")
                .WithShipCode("UPDATE_SHIP_CDE")
                .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync(NoService(shipKey, 1L).Build());

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                 .Callback<ShipInfo>(arg => capturedEntity = arg)
                 .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            capturedEntity.Should().NotBeNull();
            capturedEntity.Should().BeEquivalentTo(
                    NoService(shipKey, 1L)
                        .WithCallsign(param.Callsign)
                        .WithShipName(param.ShipName)
                        .WithShipType(ShipTypes.Passenger)
                        .WithShipCode(param.ShipCode)
                        .Build()
                );
        }

        [Fact(DisplayName = "AIS Toggle On인 경우 서비스('sat-ais')가 추가된다")]
        public async Task Case7()
        {
            const string shipKey = "UNIQUE_SHIP_KEY";
            var param = ShipParticularsParam()
               .WithShipKey(shipKey)
               .WithIsAisToggleOn(true)
               .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync(NoService(shipKey, 1L).Build());

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                .Callback<ShipInfo>(arg => capturedEntity = arg)
                .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            capturedEntity.Should().NotBeNull();
            capturedEntity.ShipServices.Should().NotBeEmpty();
            capturedEntity.ShipServices.Should()
                .ContainEquivalentOf(SatAisService(shipKey).Build());
            capturedEntity.IsUseAis.Should().BeTrue();
        }

        [Fact(DisplayName = "'sat-ais' ShipService 사용 중일때, AIS Toggle On해도 아무것도 하지 않는다")]
        public async Task Case8()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";
            var param = ShipParticularsParam()
                 .WithShipKey(shipKey)
                 .WithIsAisToggleOn(true)
                 .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync(AisOnly(shipKey, 1L).Build());

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                .Callback<ShipInfo>(arg => capturedEntity = arg)
                .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            capturedEntity.Should().NotBeNull();
            capturedEntity.IsUseAis.Should().BeTrue();
            capturedEntity.ShipServices.Should().HaveCount(1);
        }

        [Fact(DisplayName = "'sat-ais' ShipService를 사용 중이고, AIS Toggle Off하는 경우 컬렉션 길이가 0이 된다")]
        public async Task Case9()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";
            var param = ShipParticularsParam()
                 .WithShipKey(shipKey)
                 .WithIsAisToggleOn(false)
                 .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync(AisOnly(shipKey, 1L).Build());

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                .Callback<ShipInfo>(arg => capturedEntity = arg)
                .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            capturedEntity.Should().NotBeNull();
            capturedEntity.ShipServices.Should().BeEmpty();
            capturedEntity.IsUseAis.Should().BeFalse();
        }

        [Fact(DisplayName = "서비스 없는 기존 ShipInfo에 Off 토글 시 상태 변화가 없어야 한다.")]
        public async Task Case10()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";
            var param = ShipParticularsParam()
                 .WithShipKey(shipKey)
                 .WithIsAisToggleOn(false)
                 .WithIsGPSToggleOn(false)
                 .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync(NoService(shipKey, 1L).Build());

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                .Callback<ShipInfo>(arg => capturedEntity = arg)
                .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            capturedEntity.Should().NotBeNull();
            capturedEntity.IsUseAis.Should().BeFalse();
            capturedEntity.ShipServices.Should().BeEmpty();
        }

        [Fact(DisplayName = "사용중인 GPS 서비스를 비활성화하면 관련 엔티티와 필드를 초기화한다")]
        public async Task Case12()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";
            var param = ShipParticularsParam()
                .WithShipKey(shipKey)
                .WithIsGPSToggleOn(false)
                .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync(UsingSkTelink(shipKey, FixedUserId, 1L).Build());

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                 .Callback<ShipInfo>(arg => capturedEntity = arg)
                 .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            capturedEntity.Should().NotBeNull();

            capturedEntity.ShipServices.Should().BeEmpty();

            capturedEntity.ShipSatellite.Should().BeNull();
            capturedEntity.IsUseKtsat.Should().BeFalse();
            capturedEntity.ExternalShipId.Should().BeNull();

            capturedEntity.SkTelinkCompanyShip.Should().BeNull();
        }

        [Fact(DisplayName = "KT_SAT 서비스를 신규 사용하는 경우, ShipService와 ShipSatellite가 등록된다")]
        public async Task Case13()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";
            const string satelliteId = "SATELLITE_ID";
            var param = ShipParticularsParam()
                .WithShipKey(shipKey)
                .WithIsGPSToggleOn(true)
                .WithShipSatelliteParam(KtSatelliteParam().WithSatelliteId(satelliteId))
                .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync(NoService(shipKey, 1L).Build());

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                .Callback<ShipInfo>(arg => capturedEntity = arg)
                .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            capturedEntity.Should().NotBeNull();

            capturedEntity.ShipServices.Should()
                .ContainEquivalentOf(KtSatService(shipKey).Build());

            capturedEntity.ShipSatellite.Should().BeEquivalentTo(
                KtSatellite(shipKey).WithSatelliteId(satelliteId).WithCreateUserId(FixedUserId).Build(),
                options => options.Excluding(s => s.UpdateDateTime)
            );
            capturedEntity.ExternalShipId.Should().Be(satelliteId);
            capturedEntity.IsUseKtsat.Should().BeTrue();

            capturedEntity.SkTelinkCompanyShip.Should().BeNull();
        }

        [Fact(DisplayName = "신규로 SK_TELINK 서비스 사용하는 경우, ShipService,ShipSatellite, SkTelinkCompanyShip가 등록된다")]
        public async Task Case14()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";
            const string satelliteId = "SATELLITE_ID";
            var param = ShipParticularsParam()
                .WithShipKey(shipKey)
                .WithIsGPSToggleOn(true)
                .WithShipSatelliteParam(SkTelinkSatelliteParam().WithSatelliteId(satelliteId))
                .WithSkTelinkCompanyShipParam(SkTelinkCompanyShipParam())
                .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync(NoService(shipKey, 1L).Build());

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                .Callback<ShipInfo>(arg => capturedEntity = arg)
                .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            capturedEntity.Should().NotBeNull();

            capturedEntity.ShipServices.Should()
                .ContainEquivalentOf(KtSatService(shipKey).Build());

            capturedEntity.ShipSatellite.Should().BeEquivalentTo(
                SkTelinkSatellite(shipKey)
                    .WithSatelliteId(satelliteId)
                    .WithCreateUserId(FixedUserId)
                    .Build(),
                options => options.Excluding(s => s.UpdateDateTime));
            capturedEntity.ExternalShipId.Should().Be(satelliteId);
            capturedEntity.IsUseKtsat.Should().BeTrue();

            capturedEntity.SkTelinkCompanyShip.Should()
                .BeEquivalentTo(SkTelinkCompanyShip(shipKey).Build());
        }

        [Fact(DisplayName = "KT_SAT에서 SK_TELINK로 서비스 변경하는 경우, ShipSatellite가 업데이트되고, SKTelinkCompanyShip이 추가된다")]
        public async Task Case15()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";
            const string satelliteId = "SATELLITE_ID";
            var param = ShipParticularsParam()
                .WithShipKey(shipKey)
                .WithIsGPSToggleOn(true)
                .WithShipSatelliteParam(SkTelinkSatelliteParam().WithSatelliteId(satelliteId))
                .WithSkTelinkCompanyShipParam(SkTelinkCompanyShipParam())
                .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync(UsingKtSat(shipKey, FixedUserId, 1L).Build());

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                .Callback<ShipInfo>(arg => capturedEntity = arg)
                .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            capturedEntity.Should().NotBeNull();

            capturedEntity.ShipServices.Should()
                .ContainEquivalentOf(KtSatService(shipKey, 1L).Build());

            capturedEntity.ShipSatellite.Should().NotBeNull().And.BeEquivalentTo(
                SkTelinkSatellite(shipKey, 1L)
                    .WithSatelliteId(satelliteId)
                    .WithCreateUserId(FixedUserId)
                    .WithUpdateUserId(FixedUserId)
                    .Build(),
                options => options.Excluding(s => s.UpdateDateTime));
            capturedEntity.ExternalShipId.Should().Be(satelliteId);
            capturedEntity.IsUseKtsat.Should().BeTrue();

            capturedEntity.SkTelinkCompanyShip.Should()
                .BeEquivalentTo(SkTelinkCompanyShip(shipKey).Build());
        }

        [Fact(DisplayName = "SK_TELINK에서 KT_SAT로 서비스 변경하는 경우, ShipSatellite가 업데이트되고, SKTelinkCompanyShip이 제거된다")]
        public async Task Case16()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";
            const string satelliteId = "SATELLITE_ID";
            var param = ShipParticularsParam()
                .WithShipKey(shipKey)
                .WithIsGPSToggleOn(true)
                .WithShipSatelliteParam(KtSatelliteParam().WithSatelliteId(satelliteId))
                .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync(UsingSkTelink(shipKey, FixedUserId, 1L).Build());

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                .Callback<ShipInfo>(arg => capturedEntity = arg)
                .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            capturedEntity.Should().NotBeNull();
            capturedEntity.ExternalShipId.Should().Be(satelliteId);
            capturedEntity.IsUseKtsat.Should().BeTrue();

            capturedEntity.ShipServices.Should()
                .ContainEquivalentOf(KtSatService(shipKey, 1L).Build());

<<<<<<< HEAD
            capturedEntity.ShipSatellite.Should().NotBeNull()
                .And.BeEquivalentTo(KtSatellite(shipKey, 1L)
=======
            capturedEntity.ShipSatellite.Should().NotBeNull().And.BeEquivalentTo(
                KtSatellite(shipKey, 1L)
>>>>>>> caf3734 (Test Data Builder 팩터리 메서드 수정, 테스트 전체 리팩터링)
                    .WithSatelliteId(satelliteId)
                    .WithCreateUserId(FixedUserId)
                    .WithUpdateUserId(FixedUserId)
                    .Build(),
                options => options.Excluding(s => s.UpdateDateTime));

            capturedEntity.SkTelinkCompanyShip.Should().BeNull();
        }

        [Fact(DisplayName = "SK TELINK의 CompanyName을 업데이트 한다")]
        public async Task Case17()
        {
            // Arrange
            const string shipKey = "UNIQUE_SHIP_KEY";
            const string satelliteId = "SATELLITE_ID";
            const string updateCompanyName = "UPDATE_COMPANY_NAME";

            var param = ShipParticularsParam()
               .WithShipKey(shipKey)
               .WithIsGPSToggleOn(true)
               .WithShipSatelliteParam(SkTelinkSatelliteParam().WithSatelliteId(satelliteId))
               .WithSkTelinkCompanyShipParam(SkTelinkCompanyShipParam().WithCompanyName(updateCompanyName))
               .Build();

            _mockShipInfoRepository
                .Setup(e => e.GetByShipKeyAsync(param.ShipKey))
                .ReturnsAsync(UsingSkTelink(shipKey, FixedUserId, 1L).Build());

            ShipInfo? capturedEntity = null;
            _mockShipInfoRepository.Setup(e => e.UpsertAsync(It.IsAny<ShipInfo>()))
                .Callback<ShipInfo>(arg => capturedEntity = arg)
                .Returns(Task.CompletedTask);

            // Act
            await _sut.Process(param);

            // Assert
            capturedEntity.Should().NotBeNull();

            capturedEntity.ShipServices.Should().HaveCount(1);

            capturedEntity.ShipSatellite.Should().NotBeNull();
            var satellite = capturedEntity.ShipSatellite;
            satellite.UpdateUserId.Should().Be(FixedUserId);

            capturedEntity.SkTelinkCompanyShip.Should().NotBeNull();
            var skTelinkCompanyShip = capturedEntity.SkTelinkCompanyShip;
            skTelinkCompanyShip.CompanyName.Should().Be(updateCompanyName);
        }
    }
}
